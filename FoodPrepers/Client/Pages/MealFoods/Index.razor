
@page  "/mealfoods/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">MealFoods</h3>
<br />
<a href="/mealfoods/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New MealFood
</a>
<br />
<br />

@if (MealFoods == null)
{
    <div class="alert" alert-info>Loading MealFoods...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var mealfood in MealFoods)
            {
                <tr>
                    <td>@mealfood.MealId</td>
                    <td>
                        <a href="/mealfoods/view@mealfood.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/mealfoods/edit/@mealfood.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(mealfood.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>

            }
        </tbody>
    </table>
}




@code {
    private List<MealFood> MealFoods;

    protected async override Task OnInitializedAsync()
    {
        MealFoods = await _client.GetFromJsonAsync<List<MealFood>>($"{Endpoints.MealFoodsEndpoint}");
    }

    async Task Delete(int mealfoodId)
    {
        var mealfood = MealFoods.First(q => q.Id == mealfoodId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {mealfood.MealId}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.MealFoodsEndpoint}/{mealfoodId}");
            await OnInitializedAsync();
        }
    }

}